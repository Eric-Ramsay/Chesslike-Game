/*void host_server() {
		host = true;
		
		WSADATA wsData;
		WORD ver = MAKEWORD(2, 2);
		int wsOk = WSAStartup(ver, &wsData);

		if (wsOk != 0) {
			std::cout << "error 1" << endl;
			return;
		}

		SOCKET listening = socket(AF_INET, SOCK_STREAM, 0);
		if (listening == INVALID_SOCKET) {
			std::cout << "error 2" << std::endl;
		}

		sockaddr_in hint;
		hint.sin_family = AF_INET;
		hint.sin_port = htons(port);
		inet_pton(AF_INET, IP.c_str(), &hint.sin_addr);

		bind(listening, (sockaddr*)&hint, sizeof(hint));

		listen(listening, SOMAXCONN);		
	};

	void join_server() {
		client = true;
		
		WSADATA wsData;
		WORD ver = MAKEWORD(2, 2);
		int wsOk = WSAStartup(ver, &wsData);
		if (wsOk != 0) {
			std::cout << "error 1" << std::endl;
			return;
		}

		sock = socket(AF_INET, SOCK_STREAM, 0);
		if (sock == INVALID_SOCKET) {
			std::cout << "error 2" << std::endl;
			return;
		}

		sockaddr_in hint;
		hint.sin_family = AF_INET;
		hint.sin_port = htons(port);
		inet_pton(AF_INET, IP.c_str(), &hint.sin_addr);

		int conn = connect(sock, (sockaddr*)&hint, sizeof(hint));
		if (conn == SOCKET_ERROR) {
			std::cout << "Can't connect to server, Err #" << WSAGetLastError() << endl;
			closesocket(sock);
			WSACleanup();
		}
	};

	void host_listen() {
		if (!host) {
			return;
		}
		while (connected) {
			fd_set master;
			FD_ZERO(&master);
			FD_SET(listening, &master);

			fd_set copy = master;
			int socketCount = select(0, &copy, nullptr, nullptr, nullptr);

			for (int i = 0; i < socketCount; i++) {
				SOCKET current = copy.fd_array[i];
				if (current == listening) {
					SOCKET client = accept(listening, nullptr, nullptr);
					FD_SET(client, &master);
					std::cout << "Client Connected" << std::endl;
				}
				else { //Receive data from a client
					std::cout << "Data Received" << std::endl;
				}
			}
		}
		std::cout << "Somehow it ended" << std::endl;
	}

	void client_listen() {
		if (!client) {
			return;
		}
		while (connected) {
			char buf[4096];
			int bytesReceived = recv(sock, buf, 4096, 0);
			if (bytesReceived > 0) {
				std::cout << "Data Received " << buf << std::endl;
				//Process Data
			}
		}
	}
	*/
	

	/*void sendData(std::string data) {
		send(sock, data.c_str(), data.size() + 1, 0);
	}*/


	void server() {
		// Initialze winsock
		WSADATA wsData;
		WORD ver = MAKEWORD(2, 2);

		int wsOk = WSAStartup(ver, &wsData);

		// Create a socket
		SOCKET listening = socket(AF_INET, SOCK_STREAM, 0);

		// Bind the ip address and port to a socket
		sockaddr_in hint;
		hint.sin_family = AF_INET;
		hint.sin_port = htons(54000);
		hint.sin_addr.S_un.S_addr = INADDR_ANY; // Could also use inet_pton .... 

		bind(listening, (sockaddr*)&hint, sizeof(hint));

		// Tell Winsock the socket is for listening 
		listen(listening, SOMAXCONN);

		// Create the master file descriptor set and zero it
		fd_set master;
		FD_ZERO(&master);

		//Listen to the listening socket
		FD_SET(listening, &master);

		bool running = true;
		while (running) {
			//copy master list bc when you pass into select() it will delete sockets lmao
			fd_set copy = master;
			std::cout << "running" << std::endl;
			// See who's talking to us
			int socketCount = select(0, &copy, nullptr, nullptr, nullptr);

			// Loop through all the current connections / potential connect
			for (int i = 0; i < socketCount; i++) {
				// Makes things easy for us doing this assignment
				SOCKET sock = copy.fd_array[i];

				// Is it an inbound communication?
				if (sock == listening) {
					std::cout << "New Connection" << std::endl;
					// Accept a new connection
					SOCKET client = accept(listening, nullptr, nullptr);

					// Add the new connection to the list of connected clients
					FD_SET(client, &master);

					// Send a welcome message to the connected client
					std::string welcomeMsg = "Welcome to the Awesome Chat Server!\r\n";
					send(client, welcomeMsg.c_str(), welcomeMsg.size() + 1, 0);
				}
				else {
					char buf[4096];
					ZeroMemory(buf, 4096);

					// Receive message
					int bytesIn = recv(sock, buf, 4096, 0);
					std::cout << "Received a message: " << buf << std::endl;
					if (bytesIn <= 0) {
						// Drop the client
						std::cout << "Dropping Client" << std::endl;
						closesocket(sock);
						FD_CLR(sock, &master);
					}
					else {
						// Send message to other clients, and definiately NOT the listening socket
						std::cout << "Broadcasting Message: " << buf << std::endl;
						for (int i = 0; i < master.fd_count; i++) {
							SOCKET outSock = master.fd_array[i];
							if (outSock != listening) {
								std::ostringstream ss;
								ss << "SOCKET #" << sock << ": " << buf << "\r\n";
								std::string strOut = ss.str();

								send(outSock, strOut.c_str(), strOut.size() + 1, 0);
							}
						}
					}
				}
			}
		}

		// Remove the listening socket from the master file descriptor set and close it
		// to prevent anyone else trying to connect.
		FD_CLR(listening, &master);
		closesocket(listening);

		// Message to let users know what's happening.
		std::string msg = "Server is shutting down. Goodbye\r\n";

		while (master.fd_count > 0)
		{
			// Get the socket number
			SOCKET sock = master.fd_array[0];

			// Send the goodbye message
			send(sock, msg.c_str(), msg.size() + 1, 0);

			// Remove it from the master file list and close the socket
			FD_CLR(sock, &master);
			closesocket(sock);
		}

		// Cleanup winsock
		WSACleanup();

		system("pause");
	}

	void client()
	{
		std::string ipAddress = "127.0.0.1";			// IP Address of the server
		int port = 54000;						// Listening port # on the server

		// Initialize WinSock
		WSAData data;
		WORD ver = MAKEWORD(2, 2);
		int wsResult = WSAStartup(ver, &data);
		if (wsResult != 0)
		{
			std::cerr << "Can't start Winsock, Err #" << wsResult << std::endl;
			system("PAUSE");
			//return;
		}
		std::cout << "Made it here. 1" << std::endl;
		// Create socket
		SOCKET sock = socket(AF_INET, SOCK_STREAM, 0);
		if (sock == INVALID_SOCKET)
		{
			std::cerr << "Can't create socket, Err #" << WSAGetLastError() << std::endl;
			WSACleanup();
			system("PAUSE");
			//return;
		}

		// Fill in a hint structure
		sockaddr_in hint;
		hint.sin_family = AF_INET;
		hint.sin_port = htons(port);
		inet_pton(AF_INET, ipAddress.c_str(), &hint.sin_addr);
		std::cout << "Made it here. 2" << std::endl;
		// Connect to server
		int connResult = connect(sock, (sockaddr*)&hint, sizeof(hint));
		if (connResult == SOCKET_ERROR)
		{
			std::cerr << "Can't connect to server, Err #" << WSAGetLastError() << std::endl;
			closesocket(sock);
			WSACleanup();
			system("PAUSE");
			//return;
		}
		std::cout << "Made it here. 3" << std::endl;
		// Do-while loop to send and receive data
		char buf[4096];
		std::string input = "";
		std::cout << "> ";
		std::getline(std::cin, input);
		while (input != "end") {
			// Prompt the user for some text
			std::cout << "> ";
			int bytesReceived = recv(sock, buf, 4096, 0);
			if (bytesReceived > 0) {
				// Echo response to console
				std::cout << "SERVER> " << std::string(buf, 0, bytesReceived) << std::endl;
			}
			std::getline(std::cin, input);
			int sendResult = send(sock, input.c_str(), input.size() + 1, 0);
			if (sendResult != SOCKET_ERROR) {
				// Wait for response
				std::cout << "Waiting for Response from Server" << std::endl;
				ZeroMemory(buf, 4096);
			}
		}

		// Gracefully close down everything
		closesocket(sock);
		WSACleanup();
	}